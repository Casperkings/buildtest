//===-- XtensaSubtarget.h - Define Subtarget for the Xtensa ---------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Xtensa specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_XTENSA_XTENSASUBTARGET_H
#define LLVM_LIB_TARGET_XTENSA_XTENSASUBTARGET_H

#include "Tensilica/TensilicaSubtargetInfo.h"
#include "XtensaConfig/XtensaConfigInfo.h"
#include "XtensaFrameLowering.h"
#include "XtensaISelLowering.h"
#include "XtensaInstrInfo.h"
#include "XtensaSelectionDAGInfo.h"
#include "llvm/CodeGen/ScheduleDAG.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include <string>

namespace llvm {
class StringRef;

class XtensaSubtarget : public Tensilica::SubtargetInfo {
  virtual void anchor();
  bool HasMul32 = false;
  bool HasMul32h = false;
  bool HasClamps = false;
  bool HasCall4 = false;
  bool HasConst16 = false;
  bool HasDensity = false;
  bool HasDiv32 = false;
  bool HasL32r = false;
  bool HasMac16 = false;
  bool HasNsa = false;
  bool HasSalt = false;
  bool HasSync = false;
  bool HasExcl = false;
  bool HasS32C1I = false;
  bool IsWindowedABI = false;
  bool IsFPABI = false;
  bool IsBPredict = false;
  bool DefaultL32rFlix = false;

  bool IsXEA3 = false;

  const XtensaConfigInfo *XC;
  XtensaInstrInfo InstrInfo;
  XtensaFrameLowering FrameLowering;
  XtensaTargetLowering TLInfo;
  XtensaSelectionDAGInfo TSInfo;
  InstrItineraryData InstrItins;
  bool IsLittleEndian = true;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  template <typename... Args>
  XtensaSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                  StringRef ABIName, const TargetMachine &TM,
                  const XtensaConfigInfo *XC, Args... args)
      : Tensilica::SubtargetInfo(TT, CPU, TM, FS, args...), XC(XC),
        InstrInfo(initializeSubtargetDependencies(CPU, FS)),
        FrameLowering(*this), TLInfo(TM, *this), TSInfo(),
        IsLittleEndian(XC->IsLittleEndian) {
    InstrItins = getInstrItineraryForCPU("flix");
  }

  /// getInstrItins - Return the instruction itineraries based on subtarget
  /// selection.
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }

  virtual ~XtensaSubtarget() {}

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const XtensaInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const XtensaFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const XtensaTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const XtensaSelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const XtensaRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  bool useAA() const override;
  bool enableSubRegLiveness() const override;
  void overrideSchedPolicy(MachineSchedPolicy &Policy,
                           unsigned NumRegionInstrs) const override;
  bool enablePostRAScheduler() const override { return true; }
  bool hasMul32() const { return HasMul32; }
  bool hasCall4() const { return HasCall4; }
  bool hasConst16() const { return HasConst16; }
  bool hasClamps() const { return HasClamps; }
  bool hasDensity() const { return HasDensity; }
  bool hasDiv32() const { return HasDiv32; }
  bool hasL32r() const { return HasL32r; }
  bool hasMac16() const { return HasMac16; }
  bool hasMul32h() const { return HasMul32h; }
  bool hasNsa() const { return HasNsa; }
  bool hasSalt() const { return HasSalt; }
  bool hasSync() const { return HasSync; }
  bool hasExcl() const { return HasExcl; }
  bool hasS32C1I() const { return HasS32C1I; }
  bool isWindowedABI() const { return IsWindowedABI; }
  bool isCall0ABI() const { return !IsWindowedABI; }
  bool isOldFPABI() const { return !IsFPABI; }
  bool isBPredict() const { return IsBPredict; }
  bool isLittleEndian() const { return IsLittleEndian; }
  bool L32RFlix() const { return DefaultL32rFlix; }

  bool isXEA3() const { return IsXEA3; }
  bool enableMachineScheduler() const override { return true; }
  bool enableMachineSchedDefaultSched() const override { return false; }
  AntiDepBreakMode getAntiDepBreakMode() const override { return ANTIDEP_ALL; }
  unsigned getAltSchedClass(unsigned SchedClass,
                            const MachineInstr *MI) const override;
  bool mayBundleOverlappingLoadAndStore() const final {
    // TENX-49437, TENX-27498. Bundling overlapping load and store allowed in
    // RG-2015.0. We test for SALT here, which also appeared in RG-2015.0.
    return hasSalt();
  }
  const XtensaConfigInfo &getXtensaConfigInfo() const { return *XC; }
  bool enableEarlyIfConversion() const override { return true; }
  bool enableLoadStoreIfConversion() const override {
    return hasSalt() && (InstrInfo.getMaxNumSlot() >= 5);
  }

  void setEmergencyARSpillSlot(MachineFunction &MF, int N) const override;
  void IMAPBBLoop(MachineBasicBlock *MBB, const MachineLoopInfo *MLI,
                  MachineDominatorTree *MDT, AAResults *AA) const override;
private:
  XtensaSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);
  void initSubtargetFeatures(StringRef CPU, StringRef FS);
};

} // End llvm namespace

#define GET_SUBTARGETINFO_HEADER
#include "XtensaGenSubtargetInfo.inc"

#endif
