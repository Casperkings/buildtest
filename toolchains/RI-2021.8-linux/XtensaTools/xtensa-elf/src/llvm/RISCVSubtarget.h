//===-- RISCVSubtarget.h - Define Subtarget for the RISCV -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the RISCV specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_RISCV_RISCVSUBTARGET_H
#define LLVM_LIB_TARGET_RISCV_RISCVSUBTARGET_H

#if defined(TENSILICA) || 1
#include "Tensilica/TensilicaSubtargetInfo.h"
#include "RISCVConfig/RISCVConfigInfo.h"
#endif
#include "RISCVFrameLowering.h"
#include "RISCVISelLowering.h"
#include "RISCVInstrInfo.h"
#include "Utils/RISCVBaseInfo.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "llvm/CodeGen/GlobalISel/RegisterBankInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#if !defined(TENSILICA) && 0
#define GET_SUBTARGETINFO_HEADER
#include "RISCVGenSubtargetInfo.inc"
#endif

namespace llvm {
class StringRef;
#if defined(TENSILICA) || 1
class RISCVSubtarget : public Tensilica::SubtargetInfo {
#else
class RISCVSubtarget : public RISCVGenSubtargetInfo
#endif
  virtual void anchor();
  bool HasStdExtM = false;
  bool HasStdExtA = false;
  bool HasStdExtF = false;
  bool HasStdExtD = false;
  bool HasStdExtC = false;
  bool HasRV64 = false;
  bool IsRV32E = false;
#if defined(TENSILICA) || 1
  bool HasCmov = false;
  bool HasStdExtZbb = false;
#endif
  bool EnableLinkerRelax = false;
  bool EnableRVCHintInstrs = false;
  unsigned XLen = 32;
  MVT XLenVT = MVT::i32;
#if defined(TENSILICA) || 1
  const RISCVConfigInfo *RVC;
#endif
  RISCVABI::ABI TargetABI = RISCVABI::ABI_Unknown;
  BitVector UserReservedRegister;
  RISCVFrameLowering FrameLowering;
  RISCVInstrInfo InstrInfo;
#if !defined(TENSILICA) && 0 // Moved to InstrInfo.
  RISCVRegisterInfo RegInfo;
#endif
  RISCVTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  RISCVSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                  StringRef CPU, StringRef FS,
                                                  StringRef ABIName);
#if defined(TENSILICA) || 1
  void initSubtargetFeatures(StringRef CPU, StringRef FS);
#endif

public:
#if defined(TENSILICA) || 1
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  template <typename... Args>
  RISCVSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                 StringRef ABIName, const TargetMachine &TM,
                 const RISCVConfigInfo *RVC, Args... args)
      : Tensilica::SubtargetInfo(TT, CPU, TM, FS, args...), RVC(RVC),
        FrameLowering(initializeSubtargetDependencies(TT, CPU, FS, ABIName)),
        InstrInfo(*this), TLInfo(TM, *this), TSInfo() {
    initRISCVSubtarget();
  }

  void initRISCVSubtarget();
  const RISCVConfigInfo &getRISCVConfigInfo() const { return *RVC; }
#else
  // Initializes the data members to match that of the specified triple.
  RISCVSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                 StringRef ABIName, const TargetMachine &TM);
#endif

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const RISCVFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const RISCVInstrInfo *getInstrInfo() const override { return &InstrInfo; }
#if defined(TENSILICA) || 1
  const RISCVRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
#else
  const RISCVRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
#endif
  const RISCVTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  bool enableMachineScheduler() const override { return true; }
#if defined(TENSILICA) || 1
  // bool enableMachineSchedDefaultSched() const final { return false; }
  bool useAA() const final;
  bool enableSubRegLiveness() const final;
  // void overrideSchedPolicy(MachineSchedPolicy &Policy,
  //                         unsigned NumRegionInstrs) const final;
  bool enablePostRAScheduler() const final { return true; }
  AntiDepBreakMode getAntiDepBreakMode() const final { return ANTIDEP_ALL; }
#endif
  bool hasStdExtM() const { return HasStdExtM; }
  bool hasStdExtA() const { return HasStdExtA; }
  bool hasStdExtF() const { return HasStdExtF; }
  bool hasStdExtD() const { return HasStdExtD; }
  bool hasStdExtC() const { return HasStdExtC; }
  bool is64Bit() const { return HasRV64; }
  bool isRV32E() const { return IsRV32E; }
#if defined(TENSILICA) || 1
  bool hasCmov() const { return HasCmov; }
  bool hasStdExtZbb() const { return HasStdExtZbb; }
#endif

  bool enableLinkerRelax() const { return EnableLinkerRelax; }
  bool enableRVCHintInstrs() const { return EnableRVCHintInstrs; }
  MVT getXLenVT() const { return XLenVT; }
  unsigned getXLen() const { return XLen; }
  RISCVABI::ABI getTargetABI() const { return TargetABI; }
  bool isRegisterReservedByUser(Register i) const {
#if defined(TENSILICA) || 1
    assert(i < getRegisterInfo()->getNumRegs() && "Register out of range");
#else
    assert(i < RISCV::NUM_TARGET_REGS && "Register out of range");
#endif
    return UserReservedRegister[i];
  }

protected:
  // GlobalISel related APIs.
  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<InstructionSelector> InstSelector;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;

public:
  const CallLowering *getCallLowering() const override;
  InstructionSelector *getInstructionSelector() const override;
  const LegalizerInfo *getLegalizerInfo() const override;
  const RegisterBankInfo *getRegBankInfo() const override;
#if defined(TENSILICA) || 1
  bool enableEarlyIfConversion() const override { return true; }
  bool enableLoadStoreIfConversion() const override {
    return /*hasSalt() &&*/ (InstrInfo.getMaxNumSlot() >= 2);
  }
#endif
};
} // End llvm namespace

#if defined(TENSILICA) || 1
#define GET_SUBTARGETINFO_HEADER
#include "RISCVGenSubtargetInfo.inc"
#endif

#endif
